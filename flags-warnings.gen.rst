.. This file is generated by utils/mkUserGuidePart

+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| Flag                                               | Description                                                                                          | Static/Dynamic                 | Reverse                                            |
+====================================================+======================================================================================================+================================+====================================================+
| ``-W``                                             | enable normal warnings                                                                               | dynamic                        | ``-w``                                             |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-w``                                             | disable all warnings                                                                                 | dynamic                        |                                                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-Wall``                                          | enable almost all warnings (details in :ref:`options-sanity`)                                        | dynamic                        | ``-w``                                             |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-Werror``                                        | make warnings fatal                                                                                  | dynamic                        | ``-Wwarn``                                         |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-Wwarn``                                         | make warnings non-fatal                                                                              | dynamic                        | ``-Werror``                                        |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fdefer-type-errors``                            | Turn type errors into warnings, :ref:`deferring the error until runtime <defer-type-errors>`.        | dynamic                        | ``-fno-defer-type-errors``                         |
|                                                    | Implies ``-fdefer-typed-holes``. See also ``-fwarn-deferred-type-errors``                            |                                |                                                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fdefer-typed-holes``                            | Convert :ref:`typed hole <typed-holes>` errors into warnings, :ref:`deferring the error until        | dynamic                        | ``-fno-defer-typed-holes``                         |
|                                                    | runtime <defer-type-errors>`. Implied by ``-fdefer-type-errors``. See also                           |                                |                                                    |
|                                                    | ``-fwarn-typed-holes``.                                                                              |                                |                                                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fhelpful-errors``                               | Make suggestions for mis-spelled names.                                                              | dynamic                        | ``-fno-helpful-errors``                            |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-deprecated-flags``                        | warn about uses of commandline flags that are deprecated                                             | dynamic                        | ``-fno-warn-deprecated-flags``                     |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-duplicate-constraints``                   | warn when a constraint appears duplicated in a type signature                                        | dynamic                        | ``-fno-warn-duplicate-constraints``                |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-duplicate-exports``                       | warn when an entity is exported multiple times                                                       | dynamic                        | ``-fno-warn-duplicate-exports``                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-hi-shadowing``                            | warn when a ``.hi`` file in the current directory shadows a library                                  | dynamic                        | ``-fno-warn-hi-shadowing``                         |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-identities``                              | warn about uses of Prelude numeric conversions that are probably the identity (and hence could       | dynamic                        | ``-fno-warn-identities``                           |
|                                                    | be omitted)                                                                                          |                                |                                                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-implicit-prelude``                        | warn when the Prelude is implicitly imported                                                         | dynamic                        | ``-fno-warn-implicit-prelude``                     |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-incomplete-patterns``                     | warn when a pattern match could fail                                                                 | dynamic                        | ``-fno-warn-incomplete-patterns``                  |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-incomplete-uni-patterns``                 | warn when a pattern match in a lambda expression or pattern binding could fail                       | dynamic                        | ``-fno-warn-incomplete-uni-patterns``              |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-incomplete-record-updates``               | warn when a record update could fail                                                                 | dynamic                        | ``-fno-warn-incomplete-record-updates``            |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-lazy-unlifted-bindings``                  | *(deprecated)* warn when a pattern binding looks lazy but must be strict                             | dynamic                        | ``-fno-warn-lazy-unlifted-bindings``               |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-missing-fields``                          | warn when fields of a record are uninitialised                                                       | dynamic                        | ``-fno-warn-missing-fields``                       |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-missing-import-lists``                    | warn when an import declaration does not explicitly list all thenames brought into scope             | dynamic                        | ``-fnowarn-missing-import-lists``                  |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-missing-methods``                         | warn when class methods are undefined                                                                | dynamic                        | ``-fno-warn-missing-methods``                      |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-missing-signatures``                      | warn about top-level functions without signatures                                                    | dynamic                        | ``-fno-warn-missing-signatures``                   |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-missing-exported-sigs``                   | warn about top-level functions without signatures, only if they are exported. takes precedence       | dynamic                        | ``-fno-warn-missing-exported-sigs``                |
|                                                    | over -fwarn-missing-signatures                                                                       |                                |                                                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-missing-local-sigs``                      | warn about polymorphic local bindings without signatures                                             | dynamic                        | ``-fno-warn-missing-local-sigs``                   |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-monomorphism-restriction``                | warn when the Monomorphism Restriction is applied                                                    | dynamic                        | ``-fno-warn-monomorphism-restriction``             |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-name-shadowing``                          | warn when names are shadowed                                                                         | dynamic                        | ``-fno-warn-name-shadowing``                       |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-orphans``                                 | warn when the module contains :ref:`orphan instance declarations or rewrite rules                    | dynamic                        | ``-fno-warn-orphans``                              |
|                                                    | <orphan-modules>`                                                                                    |                                |                                                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-overlapping-patterns``                    | warn about overlapping patterns                                                                      | dynamic                        | ``-fno-warn-overlapping-patterns``                 |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-tabs``                                    | warn if there are tabs in the source file                                                            | dynamic                        | ``-fno-warn-tabs``                                 |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-type-defaults``                           | warn when defaulting happens                                                                         | dynamic                        | ``-fno-warn-type-defaults``                        |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-unrecognised-pragmas``                    | warn about uses of pragmas that GHC doesn't recognise                                                | dynamic                        | ``-fno-warn-unrecognised-pragmas``                 |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-unticked-promoted-constructors``          | warn if promoted constructors are not ticked                                                         | dynamic                        | ``-fno-warn-unticked-promoted-constructors``       |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-unused-binds``                            | warn about bindings that are unused. Alias for ``-fwarn-unused-top-binds``,                          | dynamic                        | ``-fno-warn-unused-binds``                         |
|                                                    | ``-fwarn-unused-local-binds`` and ``-fwarn-unused-pattern-binds``                                    |                                |                                                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-unused-top-binds``                        | warn about top-level bindings that are unused                                                        | dynamic                        | ``-fno-warn-unused-top-binds``                     |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-unused-local-binds``                      | warn about local bindings that are unused                                                            | dynamic                        | ``-fno-warn-unused-local-binds``                   |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-unused-pattern-binds``                    | warn about pattern match bindings that are unused                                                    | dynamic                        | ``-fno-warn-unused-pattern-binds``                 |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-unused-imports``                          | warn about unnecessary imports                                                                       | dynamic                        | ``-fno-warn-unused-imports``                       |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-unused-matches``                          | warn about variables in patterns that aren't used                                                    | dynamic                        | ``-fno-warn-unused-matches``                       |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-unused-do-bind``                          | warn about do bindings that appear to throw away values of types other than ``()``                   | dynamic                        | ``-fno-warn-unused-do-bind``                       |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-wrong-do-bind``                           | warn about do bindings that appear to throw away monadic values that you should have bound           | dynamic                        | ``-fno-warn-wrong-do-bind``                        |
|                                                    | instead                                                                                              |                                |                                                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-unsafe``                                  | warn if the module being compiled is regarded to be unsafe. Should be used to check the safety       | dynamic                        | ``-fno-warn-unsafe``                               |
|                                                    | status of modules when using safe inference. Works on all module types, even those using             |                                |                                                    |
|                                                    | explicit :ref:`Safe Haskell <safe-haskell>` modes (such as ``-XTrustworthy``) and so can be          |                                |                                                    |
|                                                    | used to have the compiler check any assumptions made.                                                |                                |                                                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-safe``                                    | warn if the module being compiled is regarded to be safe. Should be used to check the safety         | dynamic                        | ``-fno-warn-safe``                                 |
|                                                    | status of modules when using safe inference. Works on all module types, even those using             |                                |                                                    |
|                                                    | explicit :ref:`Safe Haskell <safe-haskell>` modes (such as ``-XTrustworthy``) and so can be          |                                |                                                    |
|                                                    | used to have the compiler check any assumptions made.                                                |                                |                                                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-trustworthy-safe``                        | warn if the module being compiled is marked as ``-XTrustworthy`` but it could instead be marked      | dynamic                        | ``-fno-warn-safe``                                 |
|                                                    | as ``-XSafe``, a more informative bound. Can be used to detect once a Safe Haskell bound can be      |                                |                                                    |
|                                                    | improved as dependencies are updated.                                                                |                                |                                                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-warnings-deprecations``                   | warn about uses of functions & types that have warnings or deprecated pragmas                        | dynamic                        | ``-fno-warn-warnings-deprecations``                |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-amp``                                     | *(deprecated)* warn on definitions conflicting with the Applicative-Monad Proposal (AMP)             | dynamic                        | ``-fno-warn-amp``                                  |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-deferred-type-errors``                    | Report warnings when :ref:`deferred type errors <defer-type-errors>` are enabled. This option        | dynamic                        | ``-fno-warn-deferred-type-errors``                 |
|                                                    | is enabled by default. See ``-fdefer-type-errors``.                                                  |                                |                                                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-typed-holes``                             | Report warnings when :ref:`typed hole <typed-holes>` errors are :ref:`deferred until runtime         | dynamic                        | ``-fno-warn-typed-holes``                          |
|                                                    | <defer-type-errors>`. See ``-fdefer-typed-holes``.                                                   |                                |                                                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-partial-type-signatures``                 | warn about holes in partial type signatures when ``-XPartialTypeSignatures`` is enabled. Not         | dynamic                        | ``-fno-warn-partial-type-signatures``              |
|                                                    | applicable when ``-XPartialTypesignatures`` is not enabled, in which case errors are generated       |                                |                                                    |
|                                                    | for such holes. See :ref:`partial-type-signatures`.                                                  |                                |                                                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| ``-fwarn-deriving-typeable``                       | warn when encountering a request to derive an instance of class ``Typeable``. As of GHC 7.10,        | dynamic                        | ``-fno-warn-deriving-typeable``                    |
|                                                    | such declarations are unnecessary and are ignored by the compiler because GHC has a custom           |                                |                                                    |
|                                                    | solver for discharging this type of constraint.                                                      |                                |                                                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+


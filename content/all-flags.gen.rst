.. This file is generated by utils/mkUserGuidePart

Code generation
    ``-fasm`` ``-fllvm`` ``-fno-code`` ``-fwrite-interface`` ``-fbyte-code`` ``-fobject-code``


Debugging the compiler
    ``-dcore-lint`` ``-ddump-to-file`` ``-ddump-asm`` ``-ddump-bcos`` ``-ddump-cmm`` ``-ddump-core-stats`` ``-ddump-cse`` ``-ddump-deriv`` ``-ddump-ds`` ``-ddump-foreign`` ``-ddump-hpc`` ``-ddump-inlinings`` ``-ddump-llvm`` ``-ddump-occur-anal`` ``-ddump-opt-cmm`` ``-ddump-parsed`` ``-ddump-prep`` ``-ddump-rn`` ``-ddump-rule-firings`` ``-ddump-rule-rewrites`` ``-ddump-rules`` ``-ddump-vect`` ``-ddump-simpl`` ``-ddump-simpl-iterations`` ``-ddump-spec`` ``-ddump-splices`` ``-ddump-stg`` ``-ddump-stranal`` ``-ddump-strsigs`` ``-ddump-tc`` ``-dth-dec-file`` ``-ddump-types`` ``-ddump-worker-wrapper`` ``-ddump-if-trace`` ``-ddump-tc-trace`` ``-ddump-vt-trace`` ``-ddump-rn-trace`` ``-ddump-rn-stats`` ``-ddump-simpl-stats`` ``-dno-debug-output`` ``-dppr-debug`` ``-dppr-user-length`` ``-dppr-cols⟨N⟩`` ``-dppr-case-as-let`` ``-dsuppress-all`` ``-dsuppress-uniques`` ``-dsuppress-idinfo`` ``-dsuppress-unfoldings`` ``-dsuppress-module-prefixes`` ``-dsuppress-type-signatures`` ``-dsuppress-type-applications`` ``-dsuppress-coercions`` ``-dsource-stats`` ``-dcmm-lint`` ``-dstg-lint`` ``-dstg-stats`` ``-dverbose-core2core`` ``-dverbose-stg2stg`` ``-dshow-passes`` ``-dfaststring-stats`` ``-frule-check``


C pre-processor
    ``-cpp`` ``-D⟨symbol⟩[=⟨value⟩]`` ``-U⟨symbol⟩`` ``-I⟨dir⟩``


Finding imports
    ``-i ⟨dir1⟩:⟨dir2⟩:...`` ``-i``


Interactive mode
    ``-ignore-dot-ghci`` ``-ghci-script`` ``-fbreak-on-error`` ``-fbreak-on-exception`` ``-fghci-hist-size=⟨n⟩`` ``-fprint-evld-with-show`` ``-fprint-bind-result`` ``-fno-print-bind-contents`` ``-fno-implicit-import-qualified`` ``-interactive-print``


Interface files
    ``-ddump-hi`` ``-ddump-hi-diffs`` ``-ddump-minimal-imports`` ``--show-iface ⟨file⟩``


Keeping intermediate files
    ``-keep-hc-file, -keep-hc-files`` ``-keep-llvm-file, -keep-llvm-files`` ``-keep-s-file, -keep-s-files`` ``-keep-tmp-files``


Language options
    ``-fconstraint-solver-iterations=⟨n⟩`` ``-freduction-depth=⟨n⟩`` ``-fcontext-stack=⟨n⟩`` ``-fglasgow-exts`` ``-firrefutable-tuples`` ``-fpackage-trust`` ``-ftype-function-depth=⟨n⟩`` ``-XAllowAmbiguousTypes`` ``-XArrows`` ``-XApplicativeDo`` ``-XAutoDeriveTypeable`` ``-XBangPatterns`` ``-XBinaryLiterals`` ``-XCApiFFI`` ``-XConstrainedClassMethods`` ``-XConstraintKinds`` ``-XCPP`` ``-XDataKinds`` ``-XDefaultSignatures`` ``-XDeriveAnyClass`` ``-XDeriveDataTypeable`` ``-XDeriveFunctor`` ``-XDeriveFoldable`` ``-XDeriveGeneric`` ``-XDeriveGeneric`` ``-XDeriveLift`` ``-XDeriveTraversable`` ``-XDisambiguateRecordFields`` ``-XEmptyCase`` ``-XEmptyDataDecls`` ``-XExistentialQuantification`` ``-XExplicitForAll`` ``-XExplicitNamespaces`` ``-XExtendedDefaultRules`` ``-XFlexibleContexts`` ``-XFlexibleInstances`` ``-XForeignFunctionInterface`` ``-XFunctionalDependencies`` ``-XGADTs`` ``-XGADTSyntax`` ``-XGeneralizedNewtypeDeriving`` ``-XGenerics`` ``-XImplicitParams`` ``-XNoImplicitPrelude`` ``-XImpredicativeTypes`` ``-XIncoherentInstances`` ``-XInstanceSigs`` ``-XInterruptibleFFI`` ``-XKindSignatures`` ``-XLambdaCase`` ``-XLiberalTypeSynonyms`` ``-XMagicHash`` ``-XMonadComprehensions`` ``-XMonoLocalBinds`` ``-XNoMonomorphismRestriction`` ``-XMultiParamTypeClasses`` ``-XMultiWayIf`` ``-XNamedFieldPuns`` ``-XNamedWildCards`` ``-XNegativeLiterals`` ``-XNoNPlusKPatterns`` ``-XNullaryTypeClasses`` ``-XNumDecimals`` ``-XOverlappingInstances`` ``-XOverloadedLists`` ``-XOverloadedStrings`` ``-XPackageImports`` ``-XParallelArrays`` ``-XParallelListComp`` ``-XPartialTypeSignatures`` ``-XPatternGuards`` ``-XPatternSynonyms`` ``-XPolyKinds`` ``-XPolymorphicComponents`` ``-XPostfixOperators`` ``-XQuasiQuotes`` ``-XRank2Types`` ``-XRankNTypes`` ``-XRebindableSyntax`` ``-XRecordWildCards`` ``-XRecursiveDo`` ``-XRelaxedPolyRec`` ``-XRoleAnnotations`` ``-XSafe`` ``-XScopedTypeVariables`` ``-XStandaloneDeriving`` ``-XStrictData`` ``-XTemplateHaskell`` ``-XNoTraditionalRecordSyntax`` ``-XTransformListComp`` ``-XTrustworthy`` ``-XTupleSections`` ``-XTypeFamilies`` ``-XTypeOperators`` ``-XTypeSynonymInstances`` ``-XUnboxedTuples`` ``-XUndecidableInstances`` ``-XUnicodeSyntax`` ``-XUnliftedFFITypes`` ``-XUnsafe`` ``-XViewPatterns``


Linking options
    ``-shared`` ``-staticlib`` ``-fPIC`` ``-dynamic`` ``-dynamic-too`` ``-dyno`` ``-dynosuf`` ``-dynload`` ``-framework⟨name⟩`` ``-framework-path⟨name⟩`` ``-l⟨lib⟩`` ``-L⟨dir⟩`` ``-main-is`` ``--mk-dll`` ``-no-hs-main`` ``-rtsopts,-rtsopts={none,some,all}`` ``-with-rtsopts=opts`` ``-no-rtsopts-suggestions`` ``-no-link`` ``-split-objs`` ``-split-sections`` ``-static`` ``-threaded`` ``-debug`` ``-ticky`` ``-eventlog`` ``-fno-gen-manifest`` ``-fno-embed-manifest`` ``-fno-shared-implib`` ``-dylib-install-name ⟨path⟩`` ``-rdynamic``


Miscellaneous options
    ``-jN`` ``-fno-hi-version-check`` ``-fhistory-size`` ``-fno-ghci-history`` ``-fno-ghci-sandbox`` ``-freverse-errors``


Modes of operation
    ``--help,-?`` ``--interactive`` ``--make`` ``-e expr`` ``--show-iface`` ``-M`` ``--supported-extensions, --supported-languages`` ``--show-options`` ``--info`` ``--version, -V`` ``--numeric-version`` ``--print-libdir``


Individual optimizations 
    ``-fcall-arity`` ``-fcase-merge`` ``-fcmm-elim-common-blocks`` ``-fcmm-sink`` ``-fcpr-anal`` ``-fcse`` ``-fdicts-cheap`` ``-fdicts-strict`` ``-fdmd-tx-dict-sel`` ``-fdo-eta-reduction`` ``-fdo-lambda-eta-expansion`` ``-feager-blackholing`` ``-fenable-rewrite-rules`` ``-fexcess-precision`` ``-fexpose-all-unfoldings`` ``-ffloat-in`` ``-ffull-laziness`` ``-ffun-to-thunk`` ``-fignore-asserts`` ``-fignore-interface-pragmas`` ``-flate-dmd-anal`` ``-fliberate-case`` ``-fliberate-case-threshold=⟨n⟩`` ``-floopification`` ``-fmax-inline-alloc-size=⟨n⟩`` ``-fmax-inline-memcpy-insns=⟨n⟩`` ``-fmax-inline-memset-insns=⟨n⟩`` ``-fmax-relevant-binds=⟨n⟩`` ``-fmax-simplifier-iterations=⟨n⟩`` ``-fmax-worker-args=⟨n⟩`` ``-fno-opt-coercion`` ``-fno-pre-inlining`` ``-fno-state-hack`` ``-fomit-interface-pragmas`` ``-fomit-yields`` ``-fpedantic-bottoms`` ``-fregs-graph`` ``-fregs-iterative`` ``-fsimplifier-phases=⟨n⟩`` ``-fsimpl-tick-factor=⟨n⟩`` ``-fspec-constr`` ``-fspec-constr-count=⟨n⟩`` ``-fspec-constr-threshold=⟨n⟩`` ``-fspecialise`` ``-fcross-module-specialise`` ``-fstatic-argument-transformation`` ``-fstrictness`` ``-fstrictness-before=⟨n⟩`` ``-funbox-small-strict-fields`` ``-funbox-strict-fields`` ``-funfolding-creation-threshold=⟨n⟩`` ``-funfolding-dict-discount=⟨n⟩`` ``-funfolding-fun-discount=⟨n⟩`` ``-funfolding-keeness-factor=⟨n⟩`` ``-funfolding-use-threshold=⟨n⟩`` ``-fvectorisation-avoidance`` ``-fvectorise`` ``-fworker-wrapper``


Optimization levels
    ``-O0`` ``-O, -O1`` ``-O2`` ``-Odph``


Package options
    ``-this-package-key⟨P⟩`` ``-package⟨P⟩`` ``-hide-all-packages`` ``-hide-package⟨name⟩`` ``-ignore-package⟨name⟩`` ``-package-db⟨file⟩`` ``-clear-package-db`` ``-no-global-package-db`` ``-global-package-db`` ``-no-user-package-db`` ``-user-package-db`` ``-no-auto-link-packages`` ``-trust⟨P⟩`` ``-distrust⟨P⟩`` ``-distrust-all``


Phases of compilation
    ``-F`` ``-E`` ``-C`` ``-S`` ``-c`` ``-x⟨suffix⟩``


Overriding external programs
    ``-pgmL⟨cmd⟩`` ``-pgmP⟨cmd⟩`` ``-pgmc⟨cmd⟩`` ``-pgmlo⟨cmd⟩`` ``-pgmlc⟨cmd⟩`` ``-pgms⟨cmd⟩`` ``-pgma⟨cmd⟩`` ``-pgml⟨cmd⟩`` ``-pgmdll⟨cmd⟩`` ``-pgmF⟨cmd⟩`` ``-pgmwindres⟨cmd⟩`` ``-pgmlibtool⟨cmd⟩``


Phase-specific options
    ``-optL⟨option⟩`` ``-optP⟨option⟩`` ``-optF⟨option⟩`` ``-optc⟨option⟩`` ``-optlo⟨option⟩`` ``-optlc⟨option⟩`` ``-opta⟨option⟩`` ``-optl⟨option⟩`` ``-optdll⟨option⟩`` ``-optwindres⟨option⟩``


Platform-specific options
    ``-msse2`` ``-msse4.2``


Compiler plugins
    ``-fplugin=⟨module⟩`` ``-fplugin-opt=⟨module:args⟩``


Profiling
    ``-prof`` ``-fprof-auto`` ``-fprof-auto-top`` ``-fprof-auto-exported`` ``-fprof-cafs`` ``-fno-prof-count-entries`` ``-ticky``


Program coverage
    ``-fhpc`` ``-hpcdir dir``


Recompilation checking
    ``-fforce-recomp``


Redirecting output
    ``-hcsuf ⟨suffix⟩`` ``-hidir ⟨dir⟩`` ``-hisuf ⟨suffix⟩`` ``-o ⟨filename⟩`` ``-odir ⟨dir⟩`` ``-ohi ⟨filename⟩`` ``-osuf ⟨suffix⟩`` ``-stubdir ⟨dir⟩`` ``-dumpdir ⟨dir⟩`` ``-outputdir ⟨dir⟩``


Temporary files
    ``-tmpdir ⟨dir⟩``


Verbosity options
    ``-v`` ``-v⟨n⟩`` ``-fprint-potential-instances`` ``-fprint-explicit-foralls`` ``-fprint-explicit-kinds`` ``-fprint-unicode-syntax`` ``-fprint-expanded-synonyms`` ``-ferror-spans`` ``-Rghc-timing``


Warnings
    ``-W`` ``-w`` ``-Wall`` ``-Werror`` ``-Wwarn`` ``-fdefer-type-errors`` ``-fdefer-typed-holes`` ``-fhelpful-errors`` ``-fwarn-deprecated-flags`` ``-fwarn-duplicate-constraints`` ``-fwarn-duplicate-exports`` ``-fwarn-hi-shadowing`` ``-fwarn-identities`` ``-fwarn-implicit-prelude`` ``-fwarn-incomplete-patterns`` ``-fwarn-incomplete-uni-patterns`` ``-fwarn-incomplete-record-updates`` ``-fwarn-lazy-unlifted-bindings`` ``-fwarn-missing-fields`` ``-fwarn-missing-import-lists`` ``-fwarn-missing-methods`` ``-fwarn-missing-signatures`` ``-fwarn-missing-exported-sigs`` ``-fwarn-missing-local-sigs`` ``-fwarn-monomorphism-restriction`` ``-fwarn-name-shadowing`` ``-fwarn-orphans`` ``-fwarn-overlapping-patterns`` ``-fwarn-tabs`` ``-fwarn-type-defaults`` ``-fwarn-unrecognised-pragmas`` ``-fwarn-unticked-promoted-constructors`` ``-fwarn-unused-binds`` ``-fwarn-unused-top-binds`` ``-fwarn-unused-local-binds`` ``-fwarn-unused-pattern-binds`` ``-fwarn-unused-imports`` ``-fwarn-unused-matches`` ``-fwarn-unused-do-bind`` ``-fwarn-wrong-do-bind`` ``-fwarn-unsafe`` ``-fwarn-safe`` ``-fwarn-trustworthy-safe`` ``-fwarn-warnings-deprecations`` ``-fwarn-amp`` ``-fwarn-deferred-type-errors`` ``-fwarn-typed-holes`` ``-fwarn-partial-type-signatures`` ``-fwarn-deriving-typeable``


Code generation
~~~~~~~~~~~~~~~


``-fasm``
    Use the :ref:`native code generator <native-code-gen>`

``-fllvm``
    Compile using the :ref:`LLVM code generator <llvm-code-gen>`

``-fno-code``
    Omit code generation

``-fwrite-interface``
    Always write interface files

``-fbyte-code``
    Generate byte-code

``-fobject-code``
    Generate object code


Debugging the compiler
~~~~~~~~~~~~~~~~~~~~~~


``-dcore-lint``
    Turn on internal sanity checking

``-ddump-to-file``
    Dump to files instead of stdout

``-ddump-asm``
    Dump assembly

``-ddump-bcos``
    Dump interpreter byte code

``-ddump-cmm``
    Dump C-- output

``-ddump-core-stats``
    Print a one-line summary of the size of the Core program at the end of the optimisation pipeline

``-ddump-cse``
    Dump CSE output

``-ddump-deriv``
    Dump deriving output

``-ddump-ds``
    Dump desugarer output

``-ddump-foreign``
    Dump ``foreign export`` stubs

``-ddump-hpc``
    Dump after instrumentation for program coverage

``-ddump-inlinings``
    Dump inlining info

``-ddump-llvm``
    Dump LLVM intermediate code

``-ddump-occur-anal``
    Dump occurrence analysis output

``-ddump-opt-cmm``
    Dump the results of C-- to C-- optimising passes

``-ddump-parsed``
    Dump parse tree

``-ddump-prep``
    Dump prepared core

``-ddump-rn``
    Dump renamer output

``-ddump-rule-firings``
    Dump rule firing info

``-ddump-rule-rewrites``
    Dump detailed rule firing info

``-ddump-rules``
    Dump rules

``-ddump-vect``
    Dump vectoriser input and output

``-ddump-simpl``
    Dump final simplifier output

``-ddump-simpl-iterations``
    Dump output from each simplifier iteration

``-ddump-spec``
    Dump specialiser output

``-ddump-splices``
    Dump TH spliced expressions, and what they evaluate to

``-ddump-stg``
    Dump final STG

``-ddump-stranal``
    Dump strictness analyser output

``-ddump-strsigs``
    Dump strictness signatures

``-ddump-tc``
    Dump typechecker output

``-dth-dec-file``
    Show evaluated TH declarations in a .th.hs file

``-ddump-types``
    Dump type signatures

``-ddump-worker-wrapper``
    Dump worker-wrapper output

``-ddump-if-trace``
    Trace interface files

``-ddump-tc-trace``
    Trace typechecker

``-ddump-vt-trace``
    Trace vectoriser

``-ddump-rn-trace``
    Trace renamer

``-ddump-rn-stats``
    Renamer stats

``-ddump-simpl-stats``
    Dump simplifier stats

``-dno-debug-output``
    Suppress unsolicited debugging output

``-dppr-debug``
    Turn on debug printing (more verbose)

``-dppr-user-length``
    Set the depth for printing expressions in error msgs

``-dppr-cols⟨N⟩``
    Set the width of debugging output. For example ``-dppr-cols200``

``-dppr-case-as-let``
    Print single alternative case expressions as strict lets.

``-dsuppress-all``
    In core dumps, suppress everything (except for uniques) that is suppressible.

``-dsuppress-uniques``
    Suppress the printing of uniques in debug output (easier to use ``diff``)

``-dsuppress-idinfo``
    Suppress extended information about identifiers where they are bound

``-dsuppress-unfoldings``
    Suppress the printing of the stable unfolding of a variable at its binding site

``-dsuppress-module-prefixes``
    Suppress the printing of module qualification prefixes

``-dsuppress-type-signatures``
    Suppress type signatures

``-dsuppress-type-applications``
    Suppress type applications

``-dsuppress-coercions``
    Suppress the printing of coercions in Core dumps to make them shorter

``-dsource-stats``
    Dump haskell source stats

``-dcmm-lint``
    C-- pass sanity checking

``-dstg-lint``
    STG pass sanity checking

``-dstg-stats``
    Dump STG stats

``-dverbose-core2core``
    Show output from each core-to-core pass

``-dverbose-stg2stg``
    Show output from each STG-to-STG pass

``-dshow-passes``
    Print out each pass name as it happens

``-dfaststring-stats``
    Show statistics for fast string usage when finished

``-frule-check``
    Report sites with rules that could have fired but didn't. Takes a string argument.


C pre-processor
~~~~~~~~~~~~~~~


``-cpp``
    Run the C pre-processor on Haskell source files

``-D⟨symbol⟩[=⟨value⟩]``
    Define a symbol in the C pre-processor

``-U⟨symbol⟩``
    Undefine a symbol in the C pre-processor

``-I⟨dir⟩``
    Add ⟨dir⟩ to the directory search list for ``#include`` files


Finding imports
~~~~~~~~~~~~~~~


``-i ⟨dir1⟩:⟨dir2⟩:...``
    add ⟨dir⟩, ⟨dir2⟩, etc. to import path

``-i``
    Empty the import directory list


Interactive mode
~~~~~~~~~~~~~~~~


``-ignore-dot-ghci``
    Disable reading of ``.ghci`` files

``-ghci-script``
    Read additional ``.ghci`` files

``-fbreak-on-error``
    :ref:`Break on uncaught exceptions and errors <ghci-debugger-exceptions>`

``-fbreak-on-exception``
    :ref:`Break on any exception thrown <ghci-debugger-exceptions>`

``-fghci-hist-size=⟨n⟩``
    Set the number of entries GHCi keeps for ``:history``. See :ref:`ghci-debugger`.

``-fprint-evld-with-show``
    Enable usage of ``Show`` instances in ``:print``. See :ref:`breakpoints`.

``-fprint-bind-result``
    :ref:`Turn on printing of binding results in GHCi <ghci-stmts>`

``-fno-print-bind-contents``
    :ref:`Turn off printing of binding contents in GHCi <breakpoints>`

``-fno-implicit-import-qualified``
    :ref:`Turn off implicit qualified import of everything in GHCi <ghci-import-qualified>`

``-interactive-print``
    :ref:`Select the function to use for printing evaluated expressions in GHCi <ghci-interactive-print>`


Interface files
~~~~~~~~~~~~~~~


``-ddump-hi``
    Dump the new interface to stdout

``-ddump-hi-diffs``
    Show the differences vs. the old interface

``-ddump-minimal-imports``
    Dump a minimal set of imports

``--show-iface ⟨file⟩``
    See :ref:`modes`.


Keeping intermediate files
~~~~~~~~~~~~~~~~~~~~~~~~~~


``-keep-hc-file, -keep-hc-files``
    retain intermediate ``.hc`` files

``-keep-llvm-file, -keep-llvm-files``
    retain intermediate LLVM ``.ll`` files

``-keep-s-file, -keep-s-files``
    retain intermediate ``.s`` files

``-keep-tmp-files``
    retain all intermediate temporary files


Language options
~~~~~~~~~~~~~~~~


``-fconstraint-solver-iterations=⟨n⟩``
    *default: 4.* Set the iteration limit for the type-constraint solver. Typically one iteration suffices; so please yell if you find you need to set it higher than the default. Zero means infinity.

``-freduction-depth=⟨n⟩``
    *default: 200.* Set the :ref:`limit for type simplification <undecidable-instances>`. Zero means infinity.

``-fcontext-stack=⟨n⟩``
    Deprecated. Use ``-freduction-depth=⟨n⟩`` instead.

``-fglasgow-exts``
    Deprecated. Enable most language extensions; see :ref:`options-language` for exactly which ones.

``-firrefutable-tuples``
    Make tuple pattern matching irrefutable

``-fpackage-trust``
    Enable :ref:`Safe Haskell <safe-haskell>` trusted package requirement for trustworthy modules.

``-ftype-function-depth=⟨n⟩``
    Deprecated. Use ``-freduction-depth=⟨n⟩`` instead.

``-XAllowAmbiguousTypes``
    Allow the user to write :ref:`ambiguous types <ambiguity>`, and the type inference engine to infer them.

``-XArrows``
    Enable :ref:`arrow notation <arrow-notation>` extension

``-XApplicativeDo``
    Enable :ref:`Applicative do-notation desugaring <applicative-do>`

``-XAutoDeriveTypeable``
    As of GHC 7.10, this option is not needed, and should not be used. Previously this would automatically :ref:`derive Typeable instances for every datatype and type class declaration <deriving-typeable>`. Implies ``-XDeriveDataTypeable``.

``-XBangPatterns``
    Enable :ref:`bang patterns <bang-patterns>`.

``-XBinaryLiterals``
    Enable support for :ref:`binary literals <binary-literals>`.

``-XCApiFFI``
    Enable :ref:`the CAPI calling convention <ffi-capi>`.

``-XConstrainedClassMethods``
    Enable :ref:`constrained class methods <class-method-types>`.

``-XConstraintKinds``
    Enable a :ref:`kind of constraints <constraint-kind>`.

``-XCPP``
    Enable the :ref:`C preprocessor <c-pre-processor>`.

``-XDataKinds``
    Enable :ref:`datatype promotion <promotion>`.

``-XDefaultSignatures``
    Enable :ref:`default signatures <class-default-signatures>`.

``-XDeriveAnyClass``
    Enable :ref:`deriving for any class <derive-any-class>`.

``-XDeriveDataTypeable``
    Enable ``deriving`` for the :ref:`Data class <deriving-typeable>`. Implied by ``-XAutoDeriveTypeable``.

``-XDeriveFunctor``
    Enable :ref:`deriving for the Functor class <deriving-extra>`. Implied by ``-XDeriveTraversable``.

``-XDeriveFoldable``
    Enable :ref:`deriving for the Foldable class <deriving-extra>`. Implied by ``-XDeriveTraversable``.

``-XDeriveGeneric``
    Enable :ref:`deriving for the Generic class <deriving-typeable>`.

``-XDeriveGeneric``
    Enable :ref:`deriving for the Generic class <deriving-typeable>`.

``-XDeriveLift``
    Enable :ref:`deriving for the Lift class <deriving-lift>`

``-XDeriveTraversable``
    Enable :ref:`deriving for the Traversable class <deriving-extra>`. Implies ``-XDeriveFunctor`` and ``-XDeriveFoldable``.

``-XDisambiguateRecordFields``
    Enable :ref:`record field disambiguation <disambiguate-fields>`. Implied by ``-XRecordWildCards``.

``-XEmptyCase``
    Allow :ref:`empty case alternatives <empty-case>`.

``-XEmptyDataDecls``
    Enable empty data declarations.

``-XExistentialQuantification``
    Enable :ref:`existential quantification <existential-quantification>`.

``-XExplicitForAll``
    Enable :ref:`explicit universal quantification <explicit-foralls>`. Implied by ``-XScopedTypeVariables``, ``-XLiberalTypeSynonyms``, ``-XRankNTypes`` and ``-XExistentialQuantification``.

``-XExplicitNamespaces``
    Enable using the keyword ``type`` to specify the namespace of entries in imports and exports (:ref:`explicit-namespaces`). Implied by ``-XTypeOperators`` and ``-XTypeFamilies``.

``-XExtendedDefaultRules``
    Use GHCi's :ref:`extended default rules <extended-default-rules>` in a normal module.

``-XFlexibleContexts``
    Enable :ref:`flexible contexts <flexible-contexts>`. Implied by ``-XImplicitParams``.

``-XFlexibleInstances``
    Enable :ref:`flexible instances <instance-rules>`. Implies ``-XTypeSynonymInstances``. Implied by ``-XImplicitParams``.

``-XForeignFunctionInterface``
    Enable :ref:`foreign function interface <ffi>`.

``-XFunctionalDependencies``
    Enable :ref:`functional dependencies <functional-dependencies>`. Implies ``-XMultiParamTypeClasses``.

``-XGADTs``
    Enable :ref:`generalised algebraic data types <gadt>`. Implies ``-XGADTSyntax`` and ``-XMonoLocalBinds``.

``-XGADTSyntax``
    Enable :ref:`generalised algebraic data type syntax <gadt-style>`.

``-XGeneralizedNewtypeDeriving``
    Enable :ref:`newtype deriving <newtype-deriving>`.

``-XGenerics``
    Deprecated, does nothing. No longer enables :ref:`generic classes <generic-classes>`. See also GHC's support for :ref:`generic programming <generic-programming>`.

``-XImplicitParams``
    Enable :ref:`Implicit Parameters <implicit-parameters>`. Implies ``-XFlexibleContexts`` and ``-XFlexibleInstances``.

``-XNoImplicitPrelude``
    Don't implicitly ``import Prelude``. Implied by ``-XRebindableSyntax``.

``-XImpredicativeTypes``
    Enable :ref:`impredicative types <impredicative-polymorphism>`. Implies ``-XRankNTypes``.

``-XIncoherentInstances``
    Enable :ref:`incoherent instances <instance-overlap>`. Implies ``-XOverlappingInstances``.

``-XInstanceSigs``
    Enable :ref:`instance signatures <instance-sigs>`.

``-XInterruptibleFFI``
    Enable interruptible FFI.

``-XKindSignatures``
    Enable :ref:`kind signatures <kinding>`. Implied by ``-XTypeFamilies`` and ``-XPolyKinds``.

``-XLambdaCase``
    Enable :ref:`lambda-case expressions <lambda-case>`.

``-XLiberalTypeSynonyms``
    Enable :ref:`liberalised type synonyms <type-synonyms>`.

``-XMagicHash``
    Allow ``#`` as a :ref:`postfix modifier on identifiers <magic-hash>`.

``-XMonadComprehensions``
    Enable :ref:`monad comprehensions <monad-comprehensions>`.

``-XMonoLocalBinds``
    Enable :ref:`do not generalise local bindings <mono-local-binds>`. Implied by ``-XTypeFamilies`` and ``-XGADTs``.

``-XNoMonomorphismRestriction``
    Disable the :ref:`monomorphism restriction <monomorphism>`.

``-XMultiParamTypeClasses``
    Enable :ref:`multi parameter type classes <multi-param-type-classes>`. Implied by ``-XFunctionalDependencies``.

``-XMultiWayIf``
    Enable :ref:`multi-way if-expressions <multi-way-if>`.

``-XNamedFieldPuns``
    Enable :ref:`record puns <record-puns>`.

``-XNamedWildCards``
    Enable :ref:`named wildcards <named-wildcards>`.

``-XNegativeLiterals``
    Enable support for :ref:`negative literals <negative-literals>`.

``-XNoNPlusKPatterns``
    Disable support for ``n+k`` patterns.

``-XNullaryTypeClasses``
    Deprecated, does nothing. :ref:`nullary (no parameter) type classes <nullary-type-classes>` are now enabled using ``-XMultiParamTypeClasses``.

``-XNumDecimals``
    Enable support for 'fractional' integer literals.

``-XOverlappingInstances``
    Enable :ref:`overlapping instances <instance-overlap>`.

``-XOverloadedLists``
    Enable :ref:`overloaded lists <overloaded-lists>`.

``-XOverloadedStrings``
    Enable :ref:`overloaded string literals <overloaded-strings>`.

``-XPackageImports``
    Enable :ref:`package-qualified imports <package-imports>`.

``-XParallelArrays``
    Enable parallel arrays. Implies ``-XParallelListComp``.

``-XParallelListComp``
    Enable :ref:`parallel list comprehensions <parallel-list-comprehensions>`. Implied by ``-XParallelArrays``.

``-XPartialTypeSignatures``
    Enable :ref:`partial type signatures <partial-type-signatures>`.

``-XPatternGuards``
    Enable :ref:`pattern guards <pattern-guards>`.

``-XPatternSynonyms``
    Enable :ref:`pattern synonyms <pattern-synonyms>`.

``-XPolyKinds``
    Enable :ref:`kind polymorphism <kind-polymorphism>`. Implies ``-XKindSignatures``.

``-XPolymorphicComponents``
    Enable :ref:`polymorphic components for data constructors <universal-quantification>`. Synonym for ``-XRankNTypes``.

``-XPostfixOperators``
    Enable :ref:`postfix operators <postfix-operators>`.

``-XQuasiQuotes``
    Enable :ref:`quasiquotation <th-quasiquotation>`.

``-XRank2Types``
    Enable :ref:`rank-2 types <universal-quantification>`. Synonym for ``-XRankNTypes``.

``-XRankNTypes``
    Enable :ref:`rank-N types <universal-quantification>`. Implied by ``-XImpredicativeTypes``.

``-XRebindableSyntax``
    Employ :ref:`rebindable syntax <rebindable-syntax>`. Implies ``-XNoImplicitPrelude``.

``-XRecordWildCards``
    Enable :ref:`record wildcards <record-wildcards>`. Implies ``-XDisambiguateRecordFields``.

``-XRecursiveDo``
    Enable :ref:`recursive do (mdo) notation <recursive-do-notation>`.

``-XRelaxedPolyRec``
    *(deprecated)* Relaxed checking for :ref:`mutually-recursive polymorphic functions <typing-binds>`.

``-XRoleAnnotations``
    Enable :ref:`role annotations <role-annotations>`.

``-XSafe``
    Enable the :ref:`Safe Haskell <safe-haskell>` Safe mode.

``-XScopedTypeVariables``
    Enable :ref:`lexically-scoped type variables <scoped-type-variables>`.

``-XStandaloneDeriving``
    Enable :ref:`standalone deriving <stand-alone-deriving>`.

``-XStrictData``
    Enable :ref:`default strict datatype fields <strict-data>`.

``-XTemplateHaskell``
    Enable :ref:`Template Haskell <template-haskell>`.

``-XNoTraditionalRecordSyntax``
    Disable support for traditional record syntax (as supported by Haskell 98) ``C {f = x}``

``-XTransformListComp``
    Enable :ref:`generalised list comprehensions <generalised-list-comprehensions>`.

``-XTrustworthy``
    Enable the :ref:`Safe Haskell <safe-haskell>` Trustworthy mode.

``-XTupleSections``
    Enable :ref:`tuple sections <tuple-sections>`.

``-XTypeFamilies``
    Enable :ref:`type families <type-families>`. Implies ``-XExplicitNamespaces``, ``-XKindSignatures``, and ``-XMonoLocalBinds``.

``-XTypeOperators``
    Enable :ref:`type operators <type-operators>`. Implies ``-XExplicitNamespaces``.

``-XTypeSynonymInstances``
    Enable :ref:`type synonyms in instance heads <flexible-instance-head>`. Implied by ``-XFlexibleInstances``.

``-XUnboxedTuples``
    Enable :ref:`unboxed tuples <unboxed-tuples>`.

``-XUndecidableInstances``
    Enable :ref:`undecidable instances <undecidable-instances>`.

``-XUnicodeSyntax``
    Enable :ref:`unicode syntax <unicode-syntax>`.

``-XUnliftedFFITypes``
    Enable unlifted FFI types.

``-XUnsafe``
    Enable :ref:`Safe Haskell <safe-haskell>` Unsafe mode.

``-XViewPatterns``
    Enable :ref:`view patterns <view-patterns>`.


Linking options
~~~~~~~~~~~~~~~


``-shared``
    Generate a shared library (as opposed to an executable)

``-staticlib``
    On Darwin/OS X/iOS only, generate a standalone static library (as opposed to an executable). This is the usual way to compile for iOS.

``-fPIC``
    Generate position-independent code (where available)

``-dynamic``
    Use dynamic Haskell libraries (if available)

``-dynamic-too``
    Build dynamic object files *as well as* static object files during compilation

``-dyno``
    Set the output path for the *dynamically* linked objects

``-dynosuf``
    Set the output suffix for dynamic object files

``-dynload``
    Selects one of a number of modes for finding shared libraries at runtime.

``-framework⟨name⟩``
    On Darwin/OS X/iOS only, link in the framework ⟨name⟩. This option corresponds to the ``-framework`` option for Apple's Linker.

``-framework-path⟨name⟩``
    On Darwin/OS X/iOS only, add ⟨dir⟩ to the list of directories searched for frameworks. This option corresponds to the ``-F`` option for Apple's Linker.

``-l⟨lib⟩``
    Link in library ⟨lib⟩

``-L⟨dir⟩``
    Add ⟨dir⟩ to the list of directories searched for libraries

``-main-is``
    Set main module and function

``--mk-dll``
    DLL-creation mode (Windows only)

``-no-hs-main``
    Don't assume this program contains ``main``

``-rtsopts,-rtsopts={none,some,all}``
    Control whether the RTS behaviour can be tweaked via command-lineflags and the ``GHCRTS`` environment variable. Using ``none`` means no RTS flags can be given; ``some`` means only a minimum of safe options can be given (the default), and ``all`` (or no argument at all) means that all RTS flags are permitted.

``-with-rtsopts=opts``
    Set the default RTS options to ⟨opts⟩.

``-no-rtsopts-suggestions``
    Don't print RTS suggestions about linking with ``-rtsopts``.

``-no-link``
    Omit linking

``-split-objs``
    Split objects (for libraries)

``-split-sections``
    Split sections for link-time dead-code stripping

``-static``
    Use static Haskell libraries

``-threaded``
    Use the threaded runtime

``-debug``
    Use the debugging runtime

``-ticky``
    For linking, this simply implies ``-debug``; see :ref:`ticky-ticky`.

``-eventlog``
    Enable runtime event tracing

``-fno-gen-manifest``
    Do not generate a manifest file (Windows only)

``-fno-embed-manifest``
    Do not embed the manifest in the executable (Windows only)

``-fno-shared-implib``
    Don't generate an import library for a DLL (Windows only)

``-dylib-install-name ⟨path⟩``
    Set the install name (via ``-install_name`` passed to Apple's linker), specifying the full install path of the library file. Any libraries or executables that link with it later will pick up that path as their runtime search location for it. (Darwin/OS X only)

``-rdynamic``
    This instructs the linker to add all symbols, not only used ones, to the dynamic symbol table. Currently Linux and Windows/MinGW32 only. This is equivalent to using ``-optl -rdynamic`` on Linux, and ``-optl -export-all-symbols`` on Windows.


Miscellaneous options
~~~~~~~~~~~~~~~~~~~~~


``-jN``
    When compiling with ``--make``, compile ⟨N⟩ modules in parallel.

``-fno-hi-version-check``
    Don't complain about ``.hi`` file mismatches

``-fhistory-size``
    Set simplification history size

``-fno-ghci-history``
    Do not use the load/store the GHCi command history from/to ``ghci_history``.

``-fno-ghci-sandbox``
    Turn off the GHCi sandbox. Means computations are run in the main thread, rather than a forked thread.

``-freverse-errors``
    Display errors in GHC/GHCi sorted by reverse order of source code line numbers.


Modes of operation
~~~~~~~~~~~~~~~~~~


``--help,-?``
    Display help

``--interactive``
    Interactive mode - normally used by just running ``ghci``; see :ref:`ghci` for details.

``--make``
    Build a multi-module Haskell program, automatically figuring out dependencies. Likely to be much easier, and faster, than using ``make``; see :ref:`make-mode` for details.

``-e expr``
    Evaluate ``expr``; see :ref:`eval-mode` for details.

``--show-iface``
    display the contents of an interface file.

``-M``
    denerate dependency information suitable for use in a ``Makefile``; see :ref:`makefile-dependencies` for details.

``--supported-extensions, --supported-languages``
    display the supported language extensions

``--show-options``
    display the supported command line options

``--info``
    display information about the compiler

``--version, -V``
    display GHC version

``--numeric-version``
    display GHC version (numeric only)

``--print-libdir``
    display GHC library directory


Individual optimizations 
~~~~~~~~~~~~~~~~~~~~~~~~~


``-fcall-arity``
    Enable call-arity optimisation. Implied by ``-O``.

``-fcase-merge``
    Enable case-merging. Implied by ``-O``.

``-fcmm-elim-common-blocks``
    Enable Cmm common block elimination. Implied by ``-O``.

``-fcmm-sink``
    Enable Cmm sinking. Implied by ``-O``.

``-fcpr-anal``
    Turn on CPR analysis in the demand analyser. Implied by ``-O``.

``-fcse``
    Enable common sub-expression elimination. Implied by ``-O``.

``-fdicts-cheap``
    Make dictionary-valued expressions seem cheap to the optimiser.

``-fdicts-strict``
    Make dictionaries strict

``-fdmd-tx-dict-sel``
    Use a special demand transformer for dictionary selectors. Always enabled by default.

``-fdo-eta-reduction``
    Enable eta-reduction. Implied by ``-O``.

``-fdo-lambda-eta-expansion``
    Enable lambda eta-expansion. Always enabled by default.

``-feager-blackholing``
    Turn on :ref:`eager blackholing <parallel-compile-options>`

``-fenable-rewrite-rules``
    Switch on all rewrite rules (including rules generated by automatic specialisation of overloaded functions). Implied by ``-O``.

``-fexcess-precision``
    Enable excess intermediate precision

``-fexpose-all-unfoldings``
    Expose all unfoldings, even for very large or recursive functions.

``-ffloat-in``
    Turn on the float-in transformation. Implied by ``-O``.

``-ffull-laziness``
    Turn on full laziness (floating bindings outwards). Implied by ``-O``.

``-ffun-to-thunk``
    Allow worker-wrapper to convert a function closure into a thunk if the function does not use any of its arguments. Off by default.

``-fignore-asserts``
    Ignore assertions in the source. Implied by ``-O``.

``-fignore-interface-pragmas``
    Ignore pragmas in interface files. Implied by ``-O0`` only.

``-flate-dmd-anal``
    Run demand analysis again, at the end of the simplification pipeline

``-fliberate-case``
    Turn on the liberate-case transformation. Implied by ``-O2``.

``-fliberate-case-threshold=⟨n⟩``
    *default: 2000.* Set the size threshold for the liberate-case transformation to ⟨n⟩

``-floopification``
    Turn saturated self-recursive tail-calls into local jumps in the generated assembly. Implied by ``-O``.

``-fmax-inline-alloc-size=⟨n⟩``
    *default: 128.* Set the maximum size of inline array allocations to ⟨n⟩ bytes (default: 128). GHC will allocate non-pinned arrays of statically known size in the current nursery block if they're no bigger than ⟨n⟩ bytes, ignoring GC overheap. This value should be quite a bit smaller than the block size (typically: 4096).

``-fmax-inline-memcpy-insns=⟨n⟩``
    *default: 32.* Inline ``memcpy`` calls if they would generate no more than ⟨n⟩ pseudo instructions.

``-fmax-inline-memset-insns=⟨n⟩``
    *default: 32.* Inline ``memset`` calls if they would generate no more than ⟨n⟩ pseudo instructions

``-fmax-relevant-binds=⟨n⟩``
    *default: 6.* Set the maximum number of bindings to display in type error messages.

``-fmax-simplifier-iterations=⟨n⟩``
    *default: 4.* Set the max iterations for the simplifier.

``-fmax-worker-args=⟨n⟩``
    *default: 10.* If a worker has that many arguments, none will be unpacked anymore.

``-fno-opt-coercion``
    Turn off the coercion optimiser

``-fno-pre-inlining``
    Turn off pre-inlining

``-fno-state-hack``
    Turn off the "state hack" whereby any lambda with a real-world state token as argument is considered to be single-entry. Hence OK to inline things inside it.

``-fomit-interface-pragmas``
    Don't generate interface pragmas. Implied by ``-O0`` only.

``-fomit-yields``
    Omit heap checks when no allocation is being performed.

``-fpedantic-bottoms``
    Make GHC be more precise about its treatment of bottom (but see also ``-fno-state-hack``). In particular, GHC will not eta-expand through a case expression.

``-fregs-graph``
    Use the graph colouring register allocator for register allocation in the native code generator. Implied by ``-O2``.

``-fregs-iterative``
    Use the iterative coalescing graph colouring register allocator in the native code generator.

``-fsimplifier-phases=⟨n⟩``
    *default: 2.* Set the number of phases for the simplifier. Ignored with ``-O0``.

``-fsimpl-tick-factor=⟨n⟩``
    *default: 100.* Set the percentage factor for simplifier ticks.

``-fspec-constr``
    Turn on the SpecConstr transformation. Implied by ``-O2``.

``-fspec-constr-count=⟨n⟩``
    default: 3.* Set to ⟨n⟩ the maximum number of specialisations that will be created for any one function by the SpecConstr transformation.

``-fspec-constr-threshold=⟨n⟩``
    *default: 2000.* Set the size threshold for the SpecConstr transformation to ⟨n⟩.

``-fspecialise``
    Turn on specialisation of overloaded functions. Implied by ``-O``.

``-fcross-module-specialise``
    Turn on specialisation of overloaded functions imported from other modules.

``-fstatic-argument-transformation``
    Turn on the static argument transformation.

``-fstrictness``
    Turn on strictness analysis. Implied by ``-O``. Implies ``-fworker-wrapper``

``-fstrictness-before=⟨n⟩``
    Run an additional strictness analysis before simplifier phase ⟨n⟩

``-funbox-small-strict-fields``
    Flatten strict constructor fields with a pointer-sized representation. Implied by ``-O``.

``-funbox-strict-fields``
    Flatten strict constructor fields

``-funfolding-creation-threshold=⟨n⟩``
    *default: 750.* Tweak unfolding settings.

``-funfolding-dict-discount=⟨n⟩``
    *default: 30.* Tweak unfolding settings.

``-funfolding-fun-discount=⟨n⟩``
    *default: 60.* Tweak unfolding settings.

``-funfolding-keeness-factor=⟨n⟩``
    *default: 1.5.* Tweak unfolding settings.

``-funfolding-use-threshold=⟨n⟩``
    *default: 60.* Tweak unfolding settings.

``-fvectorisation-avoidance``
    Enable vectorisation avoidance. Always enabled by default.

``-fvectorise``
    Enable vectorisation of nested data parallelism

``-fworker-wrapper``
    Enable the worker-wrapper transformation after a strictness analysis pass. Implied by ``-O``, and by ``-fstrictness``. Disabled by ``-fno-strictness``. Enabling ``-fworker-wrapper`` while strictness analysis is disabled (by ``-fno-strictness``) has no effect.


Optimization levels
~~~~~~~~~~~~~~~~~~~


``-O0``
    Disable optimisations (default)

``-O, -O1``
    Enable level 1 optimisations

``-O2``
    Enable level 2 optimisations

``-Odph``
    Enable level 2 optimisations, set ``-fmax-simplifier-iterations=20`` and ``-fsimplifier-phases=3``.


Package options
~~~~~~~~~~~~~~~


``-this-package-key⟨P⟩``
    Compile to be part of package ⟨P⟩

``-package⟨P⟩``
    Expose package ⟨P⟩

``-hide-all-packages``
    Hide all packages by default

``-hide-package⟨name⟩``
    Hide package ⟨P⟩

``-ignore-package⟨name⟩``
    Ignore package ⟨P⟩

``-package-db⟨file⟩``
    Add ⟨file⟩ to the package db stack.

``-clear-package-db``
    Clear the package db stack.

``-no-global-package-db``
    Remove the global package db from the stack.

``-global-package-db``
    Add the global package db to the stack.

``-no-user-package-db``
    Remove the user's package db from the stack.

``-user-package-db``
    Add the user's package db to the stack.

``-no-auto-link-packages``
    Don't automatically link in the base and rts packages.

``-trust⟨P⟩``
    Expose package ⟨P⟩ and set it to be trusted

``-distrust⟨P⟩``
    Expose package ⟨P⟩ and set it to be distrusted

``-distrust-all``
    Distrust all packages by default


Phases of compilation
~~~~~~~~~~~~~~~~~~~~~


``-F``
    Enable the use of a :ref:`pre-processor <pre-processor>` (set with ``-pgmF``)

``-E``
    Stop after preprocessing (``.hspp`` file)

``-C``
    Stop after generating C (``.hc`` file)

``-S``
    Stop after generating assembly (``.s`` file)

``-c``
    Stop after generating object (``.o``) file

``-x⟨suffix⟩``
    Override default behaviour for source files


Overriding external programs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~


``-pgmL⟨cmd⟩``
    Use ⟨cmd⟩ as the literate pre-processor

``-pgmP⟨cmd⟩``
    Use ⟨cmd⟩ as the C pre-processor (with ``-cpp`` only)

``-pgmc⟨cmd⟩``
    Use ⟨cmd⟩ as the C compiler

``-pgmlo⟨cmd⟩``
    Use ⟨cmd⟩ as the LLVM optimiser

``-pgmlc⟨cmd⟩``
    Use ⟨cmd⟩ as the LLVM compiler

``-pgms⟨cmd⟩``
    Use ⟨cmd⟩ as the splitter

``-pgma⟨cmd⟩``
    Use ⟨cmd⟩ as the assembler

``-pgml⟨cmd⟩``
    Use ⟨cmd⟩ as the linker

``-pgmdll⟨cmd⟩``
    Use ⟨cmd⟩ as the DLL generator

``-pgmF⟨cmd⟩``
    Use ⟨cmd⟩ as the pre-processor (with ``-F`` only)

``-pgmwindres⟨cmd⟩``
    Use ⟨cmd⟩ as the program for embedding manifests on Windows.

``-pgmlibtool⟨cmd⟩``
    Use ⟨cmd⟩ as the command for libtool (with ``-staticlib`` only).


Phase-specific options
~~~~~~~~~~~~~~~~~~~~~~


``-optL⟨option⟩``
    pass ⟨option⟩ to the literate pre-processor

``-optP⟨option⟩``
    pass ⟨option⟩ to cpp (with ``-cpp`` only)

``-optF⟨option⟩``
    pass ⟨option⟩ to the custom pre-processor

``-optc⟨option⟩``
    pass ⟨option⟩ to the C compiler

``-optlo⟨option⟩``
    pass ⟨option⟩ to the LLVM optimiser

``-optlc⟨option⟩``
    pass ⟨option⟩ to the LLVM compiler

``-opta⟨option⟩``
    pass ⟨option⟩ to the assembler

``-optl⟨option⟩``
    pass ⟨option⟩ to the linker

``-optdll⟨option⟩``
    pass ⟨option⟩ to the DLL generator

``-optwindres⟨option⟩``
    pass ⟨option⟩ to ``windres``.


Platform-specific options
~~~~~~~~~~~~~~~~~~~~~~~~~


``-msse2``
    (x86 only) Use SSE2 for floating-point operations

``-msse4.2``
    (x86 only) Use SSE4.2 for floating-point operations


Compiler plugins
~~~~~~~~~~~~~~~~


``-fplugin=⟨module⟩``
    Load a plugin exported by a given module

``-fplugin-opt=⟨module:args⟩``
    Give arguments to a plugin module; module must be specified with ``-fplugin``


Profiling
~~~~~~~~~


``-prof``
    Turn on profiling

``-fprof-auto``
    Auto-add ``SCC``\ s to all bindings not marked INLINE

``-fprof-auto-top``
    Auto-add ``SCC``\ s to all top-level bindings not marked INLINE

``-fprof-auto-exported``
    Auto-add ``SCC``\ s to all exported bindings not marked INLINE

``-fprof-cafs``
    Auto-add ``SCC``\ s to all CAFs

``-fno-prof-count-entries``
    Do not collect entry counts

``-ticky``
    :ref:`Turn on ticky-ticky profiling <ticky-ticky>`


Program coverage
~~~~~~~~~~~~~~~~


``-fhpc``
    Turn on Haskell program coverage instrumentation

``-hpcdir dir``
    Directory to deposit ``.mix`` files during compilation (default is ``.hpc``)


Recompilation checking
~~~~~~~~~~~~~~~~~~~~~~


``-fforce-recomp``
    Turn off recompilation checking. This is implied by any ``-ddump-X`` option when compiling a single file (i.e. when using ``-c``).


Redirecting output
~~~~~~~~~~~~~~~~~~


``-hcsuf ⟨suffix⟩``
    set the suffix to use for intermediate C files

``-hidir ⟨dir⟩``
    set directory for interface files

``-hisuf ⟨suffix⟩``
    set the suffix to use for interface files

``-o ⟨filename⟩``
    set output filename

``-odir ⟨dir⟩``
    set directory for object files

``-ohi ⟨filename⟩``
    set the filename in which to put the interface

``-osuf ⟨suffix⟩``
    set the output file suffix

``-stubdir ⟨dir⟩``
    redirect FFI stub files

``-dumpdir ⟨dir⟩``
    redirect dump files

``-outputdir ⟨dir⟩``
    set output directory


Temporary files
~~~~~~~~~~~~~~~


``-tmpdir ⟨dir⟩``
    set the directory for temporary files


Verbosity options
~~~~~~~~~~~~~~~~~


``-v``
    verbose mode (equivalent to ``-v3``)

``-v⟨n⟩``
    set verbosity level

``-fprint-potential-instances``
    display all available instances in type error messages

``-fprint-explicit-foralls``
    Print explicit ``forall`` quantification in types. See also ``-XExplicitForAll``

``-fprint-explicit-kinds``
    Print explicit kind foralls and kind arguments in types. See also ``-XKindSignature``

``-fprint-unicode-syntax``
    Use unicode syntax when printing expressions, types and kinds. See also ``-XUnicodeSyntax``

``-fprint-expanded-synonyms``
    In type errors, also print type-synonym-expanded types.

``-ferror-spans``
    Output full span in error messages

``-Rghc-timing``
    Summarise timing stats for GHC (same as ``+RTS -tstderr``).


Warnings
~~~~~~~~


``-W``
    enable normal warnings

``-w``
    disable all warnings

``-Wall``
    enable almost all warnings (details in :ref:`options-sanity`)

``-Werror``
    make warnings fatal

``-Wwarn``
    make warnings non-fatal

``-fdefer-type-errors``
    Turn type errors into warnings, :ref:`deferring the error until runtime <defer-type-errors>`. Implies ``-fdefer-typed-holes``. See also ``-fwarn-deferred-type-errors``

``-fdefer-typed-holes``
    Convert :ref:`typed hole <typed-holes>` errors into warnings, :ref:`deferring the error until runtime <defer-type-errors>`. Implied by ``-fdefer-type-errors``. See also ``-fwarn-typed-holes``.

``-fhelpful-errors``
    Make suggestions for mis-spelled names.

``-fwarn-deprecated-flags``
    warn about uses of commandline flags that are deprecated

``-fwarn-duplicate-constraints``
    warn when a constraint appears duplicated in a type signature

``-fwarn-duplicate-exports``
    warn when an entity is exported multiple times

``-fwarn-hi-shadowing``
    warn when a ``.hi`` file in the current directory shadows a library

``-fwarn-identities``
    warn about uses of Prelude numeric conversions that are probably the identity (and hence could be omitted)

``-fwarn-implicit-prelude``
    warn when the Prelude is implicitly imported

``-fwarn-incomplete-patterns``
    warn when a pattern match could fail

``-fwarn-incomplete-uni-patterns``
    warn when a pattern match in a lambda expression or pattern binding could fail

``-fwarn-incomplete-record-updates``
    warn when a record update could fail

``-fwarn-lazy-unlifted-bindings``
    *(deprecated)* warn when a pattern binding looks lazy but must be strict

``-fwarn-missing-fields``
    warn when fields of a record are uninitialised

``-fwarn-missing-import-lists``
    warn when an import declaration does not explicitly list all thenames brought into scope

``-fwarn-missing-methods``
    warn when class methods are undefined

``-fwarn-missing-signatures``
    warn about top-level functions without signatures

``-fwarn-missing-exported-sigs``
    warn about top-level functions without signatures, only if they are exported. takes precedence over -fwarn-missing-signatures

``-fwarn-missing-local-sigs``
    warn about polymorphic local bindings without signatures

``-fwarn-monomorphism-restriction``
    warn when the Monomorphism Restriction is applied

``-fwarn-name-shadowing``
    warn when names are shadowed

``-fwarn-orphans``
    warn when the module contains :ref:`orphan instance declarations or rewrite rules <orphan-modules>`

``-fwarn-overlapping-patterns``
    warn about overlapping patterns

``-fwarn-tabs``
    warn if there are tabs in the source file

``-fwarn-type-defaults``
    warn when defaulting happens

``-fwarn-unrecognised-pragmas``
    warn about uses of pragmas that GHC doesn't recognise

``-fwarn-unticked-promoted-constructors``
    warn if promoted constructors are not ticked

``-fwarn-unused-binds``
    warn about bindings that are unused. Alias for ``-fwarn-unused-top-binds``, ``-fwarn-unused-local-binds`` and ``-fwarn-unused-pattern-binds``

``-fwarn-unused-top-binds``
    warn about top-level bindings that are unused

``-fwarn-unused-local-binds``
    warn about local bindings that are unused

``-fwarn-unused-pattern-binds``
    warn about pattern match bindings that are unused

``-fwarn-unused-imports``
    warn about unnecessary imports

``-fwarn-unused-matches``
    warn about variables in patterns that aren't used

``-fwarn-unused-do-bind``
    warn about do bindings that appear to throw away values of types other than ``()``

``-fwarn-wrong-do-bind``
    warn about do bindings that appear to throw away monadic values that you should have bound instead

``-fwarn-unsafe``
    warn if the module being compiled is regarded to be unsafe. Should be used to check the safety status of modules when using safe inference. Works on all module types, even those using explicit :ref:`Safe Haskell <safe-haskell>` modes (such as ``-XTrustworthy``) and so can be used to have the compiler check any assumptions made.

``-fwarn-safe``
    warn if the module being compiled is regarded to be safe. Should be used to check the safety status of modules when using safe inference. Works on all module types, even those using explicit :ref:`Safe Haskell <safe-haskell>` modes (such as ``-XTrustworthy``) and so can be used to have the compiler check any assumptions made.

``-fwarn-trustworthy-safe``
    warn if the module being compiled is marked as ``-XTrustworthy`` but it could instead be marked as ``-XSafe``, a more informative bound. Can be used to detect once a Safe Haskell bound can be improved as dependencies are updated.

``-fwarn-warnings-deprecations``
    warn about uses of functions & types that have warnings or deprecated pragmas

``-fwarn-amp``
    *(deprecated)* warn on definitions conflicting with the Applicative-Monad Proposal (AMP)

``-fwarn-deferred-type-errors``
    Report warnings when :ref:`deferred type errors <defer-type-errors>` are enabled. This option is enabled by default. See ``-fdefer-type-errors``.

``-fwarn-typed-holes``
    Report warnings when :ref:`typed hole <typed-holes>` errors are :ref:`deferred until runtime <defer-type-errors>`. See ``-fdefer-typed-holes``.

``-fwarn-partial-type-signatures``
    warn about holes in partial type signatures when ``-XPartialTypeSignatures`` is enabled. Not applicable when ``-XPartialTypesignatures`` is not enabled, in which case errors are generated for such holes. See :ref:`partial-type-signatures`.

``-fwarn-deriving-typeable``
    warn when encountering a request to derive an instance of class ``Typeable``. As of GHC 7.10, such declarations are unnecessary and are ignored by the compiler because GHC has a custom solver for discharging this type of constraint.



